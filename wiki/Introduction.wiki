#labels Phase-Design,Phase-Implementation,Featured
=Test case generator using Orthogonal Array Testing Strategy=

=Introduction: =

The Orthogonal Array Testing Strategy (OATS) is a systematic, statistical way of testing pair-wise interactions. It provides representative (uniformly distributed) coverage of all variable pair combinations. It is also quite useful for testing combinations of configurable options (such as a web page that lets the user choose the font style, background color, and page layout). 

=Background: =
Dr. Genichi Taguchi was one of the first proponents of orthogonal arrays in test design. His techniques, known as Taguchi Methods, have been a mainstay in experimental design in manufacturing fields for decades. 


Orthogonal arrays are two dimensional arrays of numbers which possess the interesting quality that by choosing any two columns in the array you receive an even distribution of all the pair-wise combinations of values in the array. 

Here is some terminology for working with orthogonal arrays:

   * Runs: the number of rows in the array. This directly translates to the number of test cases that will be generated by the OATS technique. 

   * Factors: the number of columns in an array. This directly translates to the maximum number of variables that can be handled by this array. 

   * Levels: the maximum number of values that can be taken on by any single factor. An orthogonal array will contain values from 0 to Levels-1. 

   * Strength: the number of columns it takes to see each of the Levels Strength possibilities equally often. 

   * Orthogonal arrays are most often named following the pattern LRuns (LevelsFactors). 



=Why use this technique?=
  

Test case selection poses an interesting dilemma for the software professional. Almost everyone has heard that you can't test quality into a product that testing can only show the existence of defects and never their absence, and that exhaustive testing quickly becomes impossible -- even in small systems. However, testing is necessary. Being intelligent about which test cases you choose can make all the difference between (a) endlessly executing tests that just aren't likely to find bugs and don't increase your confidence in the system and (b) executing a concise, well-defined set of tests that are likely to uncover most (not all) of the bugs and that give you a great deal more comfort in the quality of your software. 

  

The basic fault model that lies beneath this technique is: 

   * Interactions and integrations are a major source of defects.
   * Most of these defects are not a result of complex interactions such as "When the background is blue and the font is Arial and the layout has menus on the right and the images are large and it's a Thursday then the tables don't line up properly." Most of these defects arise from simple pair-wise interactions such as "When the font is Arial and the menus are on the right the tables don't line up properly." 
   * With so many possible combinations of components or settings, it is easy to miss one.
   * Randomly selecting values to create all of the pair-wise combinations is bound to create inefficient test sets and test sets with random, senseless distribution of values. 


OATS provides a means to select a test set that: 

   * Guarantees testing the pair-wise combinations of all the selected variables.
   * Creates an efficient and concise test set with many fewer test cases than testing all combinations of all variables. 
   * Creates a test set that has an even distribution of all pair-wise combinations. 
   * Exercises some of the complex combinations of all the variables.
   * Is simpler to generate and less error prone than test sets created by hand.  


